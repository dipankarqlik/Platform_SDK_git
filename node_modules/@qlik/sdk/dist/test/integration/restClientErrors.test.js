"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../../src/errors");
const qlik_1 = require("../../src/qlik");
describe('Client', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Errors', () => {
        beforeEach(() => {
            jest.clearAllMocks();
        });
        it('Non existing host', async () => {
            jest.spyOn(global.console, 'error').mockImplementation();
            const host = 'https://incorrect-host-1234.qlikcloud.com/';
            const auth = new qlik_1.Auth({
                authType: qlik_1.AuthType.APIKey,
                host,
                apiKey: process.env.QCS_API_KEY,
            });
            expect.assertions(1);
            await expect(auth.rest('/users/me')).rejects.toThrowError(new errors_1.ConnectionError(`${errors_1.ConnectionErrorMsg.NO_RESPONSE}: ${host}`));
        });
        it('API-key is created for other tenant than the one used as host', async () => {
            const auth = new qlik_1.Auth({
                authType: qlik_1.AuthType.APIKey,
                host: 'https://open-lib-services.eu.qlik-stage.com',
                apiKey: process.env.QCS_API_KEY,
            });
            expect.assertions(1);
            await expect(auth.rest('/users/me')).rejects.toThrow(new errors_1.AuthenticationError(errors_1.AuthenticationErrorMsg.FAILED_AUTH_API_KEY));
        });
        it('Wrong API-key', async () => {
            const auth = new qlik_1.Auth({
                authType: qlik_1.AuthType.APIKey,
                host: process.env.QCS_SERVER,
                apiKey: `x${process.env.QCS_API_KEY}`,
            });
            expect.assertions(1);
            await expect(auth.rest('/users/me')).rejects.toThrow(new errors_1.AuthenticationError(errors_1.AuthenticationErrorMsg.FAILED_AUTH_API_KEY));
        }, 30000);
        it('Wrong Resource', async () => {
            const auth = new qlik_1.Auth({
                authType: qlik_1.AuthType.APIKey,
                host: process.env.QCS_SERVER,
                apiKey: process.env.QCS_API_KEY,
            });
            expect.assertions(1);
            await expect(auth.rest('/nonexistant/me')).rejects.toThrow('Not Found');
        });
    });
});
//# sourceMappingURL=restClientErrors.test.js.map