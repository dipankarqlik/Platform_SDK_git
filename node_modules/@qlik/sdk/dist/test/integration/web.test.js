"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_1 = __importDefault(require("puppeteer"));
const path_1 = __importDefault(require("path"));
const dotenv_1 = __importDefault(require("dotenv"));
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const serve_static_1 = __importDefault(require("serve-static"));
describe('WebIntegration', () => {
    const port = 1234;
    const webAppUrl = `http://localhost:${port}/`;
    beforeEach(() => {
        jest.clearAllMocks();
    });
    // Manage browser
    let browser;
    let server;
    beforeAll(async () => {
        // use .env environment variables for local debug
        const envPath = path_1.default.join(__dirname, '.env');
        if (fs_1.default.existsSync(envPath)) {
            dotenv_1.default.config({ path: envPath });
        }
        const entryPath = path_1.default.join(__dirname, '../test-web-app/dist');
        // serve the example web-app
        const serve = (0, serve_static_1.default)(entryPath, {
            index: ['index.html', 'index.htm'],
        });
        server = http_1.default.createServer((req, res) => {
            serve(req, res, () => { });
        });
        server.listen(port);
        browser = await puppeteer_1.default.launch(); // use .launch({headless: false}) for GUI
    });
    afterAll(async () => {
        await browser.close();
        await new Promise((resolve, reject) => {
            try {
                server.close(resolve);
            }
            catch (error) {
                reject(error);
            }
        });
    });
    it('allows authentication through the browser', async () => {
        const [page] = await browser.pages();
        await page.goto(webAppUrl, { timeout: 50000 });
        const loginButton = await page.waitForSelector('button[id="authenticateButton"]', {
            visible: true,
        });
        await loginButton.click();
        // Check we are in the login page
        await browser.waitForTarget((target) => target.url().includes('login.qlik.com'));
        // Fill in user and password
        const userSelector = 'input[name="email"]';
        const pwdSelector = 'input[name="password"]';
        const submitBtnSelector = '[name="submit"]';
        const userInput = await page.waitForSelector(userSelector, {
            visible: true,
        });
        await userInput.type(process.env.TEST_USER);
        const pwdInput = await page.waitForSelector(pwdSelector, { visible: true });
        await pwdInput.type(process.env.TEST_USER_PWD);
        // Submit form
        await page.$eval(submitBtnSelector, (form) => form.click());
        // Check we went back to the original url
        await browser.waitForTarget((target) => target.url() === webAppUrl);
        // wait for eval result of session app created by webapp to equal 5050 (sum of 1..100)
        await page.waitForFunction(() => (document.getElementById('evalResult')?.innerText ?? '').includes('5050'), { timeout: 50000 });
        const evalResult = await page.waitForSelector('[id="evalResult"]', {
            hidden: false,
            timeout: 50000,
        });
        const evalResultString = await evalResult.evaluate((el) => el.textContent);
        expect(evalResultString.trim()).toBe('5050');
    }, 100000);
});
//# sourceMappingURL=web.test.js.map