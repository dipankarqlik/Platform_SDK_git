"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const types_1 = require("../types/types");
const utils_1 = require("../utils/utils");
const restClient_1 = __importDefault(require("./restClient"));
const OnlyWebIntegrationError = new errors_1.CustomError('Only supported for AuthType.WebIntegration');
/**
 * @remarks
 * Auth.ts is a typescript module included in qlik-sdk for implementing authentication
 * and authorization in browsers and node.js web apps
 * (Note: 'autoRedirect' field will be set to false if missing)
 *
 * @param config - required configuration
 *
 * @returns an instance of the Auth module.
 * @example
 * ```ts
 * import Auth from '@qlik/sdk/auth';
 * const config: Config =  {
 *   authType: AuthType.WebIntegration,
 *   host: 'my-tenant.qlikcloud.com',
 *   webIntegrationId: '<webintegrationId>',
 * };
 *
 * const auth = new Auth(config);
 *
 * if(!auth.isAuthenticated()){
 *   auth.authenticate();
 * }
 * ```
 */
class Auth {
    /** config object reference for the module instance */
    config;
    /** rest client object reference for the module instance - @experimental */
    rest;
    constructor(config) {
        this.config = config;
        if (this.config.authType === types_1.AuthType.WebIntegration
            && !('autoRedirect' in this.config)) {
            this.config.autoRedirect = false;
        }
        (0, utils_1.validateConfig)(this.config);
        const rc = new restClient_1.default(this.config);
        this.rest = rc.restClientInstance;
        if (this.config.autoRedirect) {
            this.isAuthenticated().then((loggedIn) => {
                if (!loggedIn) {
                    this.authenticate();
                }
            });
        }
    }
    /**
     * Get access
     * For WebIntegration:
     * Navigates to the login page and redirects back to the current page after login
     */
    authenticate() {
        if (this.config.authType !== types_1.AuthType.WebIntegration) {
            throw OnlyWebIntegrationError;
        }
        const loginUrl = (0, utils_1.sanitizeUrl)(`${this.config.host}/login`);
        loginUrl.searchParams.append('returnto', window.location.href);
        loginUrl.searchParams.append('qlik-web-integration-id', this.config.webIntegrationId);
        window.location.assign(loginUrl.href);
    }
    /**
     * checks authentication status using the "/users/me" endpoint
     */
    async isAuthenticated() {
        if (this.config.authType !== types_1.AuthType.WebIntegration) {
            throw OnlyWebIntegrationError;
        }
        return this.rest('/users/me')
            .then((res) => res.status === 200)
            .catch(() => false);
    }
    /**
     * invalidate the current session
     */
    deAuthenticate() {
        if (this.config.authType !== types_1.AuthType.WebIntegration) {
            throw OnlyWebIntegrationError;
        }
        const logoutUrl = (0, utils_1.sanitizeUrl)(`${this.config.host}/logout`);
        logoutUrl.searchParams.append('returnto', window.location.href);
        window.location.assign(logoutUrl.href);
    }
    /**
     * generateWebsocketUrl - For WebIntegration:
     * Assumes authenticated state in order to fetch the csrf-token.
     * @param appId - The appId to generate a websocket url for
     */
    async generateWebsocketUrl(appId) {
        if (this.config.authType === types_1.AuthType.WebIntegration) {
            const loggedIn = await this.isAuthenticated();
            if (!loggedIn) {
                throw new errors_1.AuthenticationError(errors_1.AuthenticationErrorMsg.UNAUTHENTICATED);
            }
        }
        const hostUrl = new URL(this.config.host);
        const wssProtocol = hostUrl.protocol === 'http:' || hostUrl.protocol === 'ws:'
            ? 'ws:'
            : 'wss:';
        const url = `${wssProtocol}//${hostUrl.host}/app/${appId}`;
        if (this.config.authType === types_1.AuthType.APIKey) {
            return url;
        }
        if (this.config.authType === types_1.AuthType.WebIntegration) {
            if (!this.config.csrfToken) {
                const res = await this.rest('/csrf-token');
                this.config.csrfToken = res.headers.get('qlik-csrf-token');
            }
            const webUrl = `${url}?qlik-csrf-token=${this.config.csrfToken}&qlik-web-integration-id=${this.config.webIntegrationId}`;
            return webUrl;
        }
        throw new errors_1.CustomError(`${errors_1.CustomErrorMsg.NOT_IMPLEMENTED}: function generateWebsocketUrl for AuthType: ${this.config.authType}`);
    }
}
exports.default = Auth;
//# sourceMappingURL=auth.js.map