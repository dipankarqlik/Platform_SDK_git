"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfig = exports.sanitizeUrl = void 0;
const errors_1 = require("../errors");
const types_1 = require("../types/types");
/**
 * Sanitizes the URL by removing double slash "//"
 * @remarks
 * Ensures single slash dividing url path entries
 * @param url - the url to sanitize
 */
const sanitizeUrl = (url) => new URL(url.replace(/([^:])(\/\/+)/g, '$1/'));
exports.sanitizeUrl = sanitizeUrl;
/**
 * Validates the configuration object
 * @remarks

 * @param config - the config to validate
 */
const validateConfig = (config) => {
    const defaultKeys = ['host', 'authType'];
    for (let i = 0; i < defaultKeys.length; i += 1) {
        if (!(defaultKeys[i] in config)) {
            throw new errors_1.CustomError(`${errors_1.CustomErrorMsg.MISSING_CONFIG_PROPERTY}: ${defaultKeys[i]}`);
        }
    }
    if (!config.host || config.host === '') {
        throw new errors_1.CustomError(errors_1.CustomErrorMsg.EMPTY_HOST);
    }
    if (!(config.authType in types_1.AuthType)) {
        throw new errors_1.CustomError(`${errors_1.CustomErrorMsg.UNSUPPORTED_AUTH_TYPE}: ${config.authType}`);
    }
    const authTypeKeys = {
        [types_1.AuthType.WebIntegration]: ['webIntegrationId', 'autoRedirect'],
        [types_1.AuthType.APIKey]: ['apiKey'],
    };
    // Check that no property is missing
    for (let i = 0; i < authTypeKeys[config.authType].length; i += 1) {
        const authTypeKey = authTypeKeys[config.authType][i];
        if (!(authTypeKey in config)) {
            throw new errors_1.CustomError(`${errors_1.CustomErrorMsg.MISSING_CONFIG_PROPERTY}: ${authTypeKey}`);
        }
    }
    const allowedKeys = new Set([
        ...defaultKeys,
        ...authTypeKeys[config.authType],
    ]);
    // Check that wrong property is not added
    for (let i = 0; i < Object.keys(config).length; i += 1) {
        if (!allowedKeys.has(Object.keys(config)[i])) {
            throw new errors_1.CustomError(`${errors_1.CustomErrorMsg.UNSUPPORTED_PROPERTY} for authType ${config.authType}`);
        }
    }
};
exports.validateConfig = validateConfig;
//# sourceMappingURL=utils.js.map