"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const qlik_1 = require("../qlik");
const { Response } = jest.requireActual('cross-fetch');
jest.mock('cross-fetch', () => jest.fn());
const mockAppend = jest.spyOn(URLSearchParams.prototype, 'append');
describe('WebIntegration', () => {
    const realLocation = window.location;
    beforeEach(() => {
        jest.clearAllMocks();
    });
    afterAll(() => {
        window.location = realLocation;
    });
    it('authenticate: should redirect correctly', () => {
        // @ts-ignore: we are re-creating 'location' in the next line
        delete window.location;
        window.location = { ...realLocation, assign: jest.fn() };
        const expectedLoginUrl = 'http://mock-host.com/login?returnto=http%3A%2F%2Flocalhost%2F&qlik-web-integration-id=mock-web';
        const mockHost = 'http://mock-host.com';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        auth.authenticate();
        expect(mockAppend).toBeCalledTimes(2);
        expect(mockAppend.mock.calls).toEqual([
            ['returnto', 'http://localhost/'],
            ['qlik-web-integration-id', mockWebIntegrationId],
        ]);
        expect(window.location.assign).toBeCalledWith(expectedLoginUrl);
    });
    it('authenticate: should redirect correctly for host ending with slash', () => {
        // @ts-ignore: we are re-creating 'location' in the next line
        delete window.location;
        window.location = { ...realLocation, assign: jest.fn() };
        const expectedLoginUrl = 'http://mock-host.com/login?returnto=http%3A%2F%2Flocalhost%2F&qlik-web-integration-id=mock-web';
        const mockHost = 'http://mock-host.com/';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        auth.authenticate();
        expect(mockAppend).toBeCalledTimes(2);
        expect(mockAppend.mock.calls).toEqual([
            ['returnto', 'http://localhost/'],
            ['qlik-web-integration-id', mockWebIntegrationId],
        ]);
        expect(window.location.assign).toBeCalledWith(expectedLoginUrl);
    });
    it('deAuthenticate: should redirect correctly', () => {
        // @ts-ignore: we are re-creating 'location' in the next line
        delete window.location;
        window.location = { ...realLocation, assign: jest.fn() };
        const expectedLogoutUrl = 'http://mock-host.com/logout?returnto=http%3A%2F%2Flocalhost%2F';
        const mockHost = 'http://mock-host.com';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        auth.deAuthenticate();
        expect(mockAppend).toBeCalledTimes(1);
        expect(mockAppend).toBeCalledWith('returnto', 'http://localhost/');
        expect(window.location.assign).toBeCalledWith(expectedLogoutUrl);
    });
    it('deAuthenticate: should redirect correctly for host ending with slash', () => {
        // @ts-ignore: we are re-creating 'location' in the next line
        delete window.location;
        window.location = { ...realLocation, assign: jest.fn() };
        const expectedLogoutUrl = 'http://mock-host.com/logout?returnto=http%3A%2F%2Flocalhost%2F';
        const mockHost = 'http://mock-host.com/';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        auth.deAuthenticate();
        expect(mockAppend).toBeCalledTimes(1);
        expect(mockAppend).toBeCalledWith('returnto', 'http://localhost/');
        expect(window.location.assign).toBeCalledWith(expectedLogoutUrl);
    });
    it('isAuthenticated should return false when the user is not logged in', async () => {
        jest.mocked(cross_fetch_1.default).mockResolvedValue(new Response(null, { status: 401 }));
        const mockHost = 'http://mock-host.com';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        expect(await auth.isAuthenticated()).toBeFalsy();
    });
    it('generateWebsocketUrl should throw error on logged out', async () => {
        jest
            .mocked(cross_fetch_1.default)
            .mockResolvedValue(new Response(null, { status: 401, ok: false }));
        expect.assertions(1);
        await expect(async () => {
            const mockHost = 'http://mock-host.com';
            const mockWebIntegrationId = 'mock-web';
            const config = {
                host: mockHost,
                authType: qlik_1.AuthType.WebIntegration,
                webIntegrationId: mockWebIntegrationId,
                autoRedirect: false,
            };
            const auth = new qlik_1.Auth(config);
            await auth.generateWebsocketUrl('mock-appId');
        }).rejects.toThrowError('Unauthenticated access');
    });
    it('isAuthenticated should return true when the user is logged in', async () => {
        jest.mocked(cross_fetch_1.default).mockResolvedValue(new Response(null, {
            status: 200,
            headers: { 'qlik-csrf-token': 'mock-csrf-token' },
            ok: true,
        }));
        const mockHost = 'http://mock-host.com';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        expect(await auth.isAuthenticated()).toBeTruthy();
    });
    it('generateWebsocketUrl should generate correctly when logged in', async () => {
        jest.mocked(cross_fetch_1.default).mockResolvedValue(new Response(null, {
            status: 200,
            headers: { 'qlik-csrf-token': 'mock-csrf-token' },
        }));
        const mockHost = 'http://mock-host.com';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        const mockAppId = 'mockAppId';
        expect(await auth.generateWebsocketUrl(mockAppId)).toEqual('ws://mock-host.com/app/mockAppId?qlik-csrf-token=mock-csrf-token&qlik-web-integration-id=mock-web');
    });
    it('generateWebsocketUrl should generate websocket url with correct protocol', async () => {
        jest.mocked(cross_fetch_1.default).mockResolvedValue(new Response(null, {
            status: 200,
            headers: { 'qlik-csrf-token': 'mock-csrf-token' },
        }));
        const mockHost = 'http://mock-host.com';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: false,
        };
        const auth = new qlik_1.Auth(config);
        const mockAppId = 'mockAppId';
        expect(await auth.generateWebsocketUrl(mockAppId)).toEqual('ws://mock-host.com/app/mockAppId?qlik-csrf-token=mock-csrf-token&qlik-web-integration-id=mock-web');
        const mockHostSecure = 'https://mock-host.com';
        auth.config.host = mockHostSecure;
        expect(await auth.generateWebsocketUrl(mockAppId)).toEqual('wss://mock-host.com/app/mockAppId?qlik-csrf-token=mock-csrf-token&qlik-web-integration-id=mock-web');
    });
    it('autoRedirect should initiate authenticate', async () => {
        jest
            .mocked(cross_fetch_1.default)
            .mockResolvedValue(new Response(null, {
            status: 200,
            headers: { 'qlik-csrf-token': 'mock-csrf-token' },
        })) // default call
            .mockResolvedValueOnce(new Response(null, { status: 401 })); // first call
        const mockHost = 'http://mock-host.com';
        const mockWebIntegrationId = 'mock-web';
        const config = {
            host: mockHost,
            authType: qlik_1.AuthType.WebIntegration,
            webIntegrationId: mockWebIntegrationId,
            autoRedirect: true,
        };
        const auth = new qlik_1.Auth(config);
        expect(await auth.isAuthenticated()).toBeTruthy();
        expect(mockAppend).toBeCalledTimes(2);
        expect(mockAppend.mock.calls).toEqual([
            ['returnto', 'http://localhost/'],
            ['qlik-web-integration-id', mockWebIntegrationId],
        ]);
    });
});
//# sourceMappingURL=web.test.js.map